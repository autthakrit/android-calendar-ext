plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
}

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 8
        versionName "1.0.3"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    // TODO: Do not update appcompat to version 1.2.0 because the bug below
    // https://issuetracker.google.com/issues/140602653
    // The work around solution exists here https://stackoverflow.com/a/57900842 but we decided to keep
    // using non-bug version (1.0.2) until the bug is fixed

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.7.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}


publishing {
    publications {
        android.libraryVariants.all { variant ->
            ////def filename = "${archivesBaseName}-${variant.baseName}-${android.defaultConfig.versionName}"
            if (variant.buildType.name == "debug") {
                def filename = "${archivesBaseName}-${variant.baseName}"
                println("Filename: $filename")
                "${variant.name}"(MavenPublication) {
                    //println(variant.name)
                    groupId 'com.ltman'
                    artifactId = "calendar-ext"
                    version = "${android.defaultConfig.versionName}"
                    println("user = ${artifactory_user}")

                    //artifact(sourcesJar)

                    artifact file("$buildDir/outputs/aar/${filename}.aar")


                    pom.withXml {
                        // for dependencies and exclusions
                        def dependenciesNode = asNode().appendNode('dependencies')
                        def configurationNames = ["implementation", "api", "runtimeOnly"]
                        configurationNames.each { confName ->
                            configurations[confName].allDependencies.each {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                                if (it.excludeRules.size() > 0) {
                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                                    it.excludeRules.each { rule ->
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', rule.group)
                                        exclusionNode.appendNode('artifactId', rule.module)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
artifactoryPublish.dependsOn(assemble)
artifactory {
    contextUrl = "${artifactory_context_url}"
    publish {
        repository {
            repoKey = "${artifactory_dev_repo_key}"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            if (project.hasProperty('paramEnv') && project.property('paramEnv') == 'RELEASE') {
                publications('release')
            } else {
                publications('debug', 'release')
            }
            publishArtifacts = true
            publishPom = true
        }
    }
    resolve {
        repository {
            repoKey = "${artifactory_dev_repo_key}"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

